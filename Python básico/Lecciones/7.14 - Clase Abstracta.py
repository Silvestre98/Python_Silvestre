# Clase Abstracta
'''
Una clase abstracta es una clase que no puede instanciarse directamente y que sirve como modelo o plantilla
para que otras clases la hereden. Su propÃ³sito es definir una estructura comÃºn (mÃ©todos y atributos que deben implementarse)
sin dar todos los detalles de la implementaciÃ³n.

1. CaracterÃ­sticas principales

    ðŸ”¹ Se definen usando el mÃ³dulo abc (Abstract Base Classes).
    ðŸ”¹ Pueden tener mÃ©todos abstractos (obligatorios de implementar en las clases hijas).
    ðŸ”¹ Pueden tener tambiÃ©n mÃ©todos normales (con cÃ³digo) que se heredan tal cual.
    ðŸ”¹ No puedes crear objetos directamente de una clase abstracta.
'''
# Importar la clase abc con ABS (Abstract Base Classes),abstractclassmethod
from abc import ABC, abstractmethod

# CreaciÃ³n de clase figura geometrica
class Carro(abs):
    # Inicializador 
    def __init__(self, marca, anio):
        self.marca = marca
        self.anio = anio
    
    # Crear mÃ©todo abstracto
    @abstractmethod # Decorador para crear mÃ©todos abstractos
    def avanzar(self):
        pass # Se deberÃ¡ agregar la implementaciÃ³n del mÃ©todo abstracto por su cuenta en las clases hijas
    
# Ahora cada que se cree un sub clase de Carro tendrÃ¡ que tener el mÃ©todo Abstracto de forma obligaroria
#  y de igual forma no se puede instanciar esta clase
# Ejemplo
# carro = Carro('Ford',2009) ->> Esto es incorrecto no se puede instanciar una clase Abstracta