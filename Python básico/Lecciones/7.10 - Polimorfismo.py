# Polimorfismo
'''
¬øQu√© es el polimorfismo?

La palabra polimorfismo viene del griego: poly (muchos) y morphos (formas).
En POO significa que un mismo m√©todo o acci√≥n puede comportarse de distintas maneras seg√∫n el objeto que lo use.
En otras palabras: diferentes clases pueden tener m√©todos con el mismo nombre, pero cada clase ejecuta su propia versi√≥n del m√©todo.

Tipos de polimorfismo

1.- Polimorfismo por sobreescritura (override)
   üîπ Una subclase redefine un m√©todo de la clase padre.
        Ejemplo: hacer_sonido en Perro y Gato.

2.- Polimorfismo por sobrecarga (overload) (Python no lo soporta directamente)
    üîπUn m√©todo con el mismo nombre pero diferentes par√°metros.
        En Python se simula con valores por defecto o *args / **kwargs.

3.- Polimorfismo de clases abstractas (interfaces en otros lenguajes)
    üîπ Se define un m√©todo en una clase base abstracta y cada subclase lo implementa de su forma.
'''
# Clase Padre
class Animal:
    def hacer_sonido(self): # M√©todo original
        print("Hago un gru√±ido")

# Clase Hija
class Perro(Animal):
    # Sobreescribimos el m√©todo hacer_sonido

    def hacer_sonido(self): # Sobrescritura de m√©todo
        print("Guau Guau")

# Clase Hija 2
class Gato(Animal):
    def hacer_sonido(self): # Sobrescritura de m√©todo
        print("Miau Miau")

# Creacion de objetos
animal = Animal()
perro = Perro()
gato = Gato()

# Cada clase usar√° su propio m√©todo hacer_sonido,  pero las clase hijas(Gato y Perro) sobreescribieron el m√©todo original
animal.hacer_sonido()  # ‚Üí Hago un gru√±ido
perro.hacer_sonido()   # ‚Üí Guau Guau
gato.hacer_sonido()    # ‚Üí Miau Miau